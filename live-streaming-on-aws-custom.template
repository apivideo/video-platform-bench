# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
#
# Licensed under the Amazon Software License (the "License").
# You may not use this file except in compliance with the License.
# A copy of the License is located at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# or in the "license" file accompanying this file. This file is distributed
# on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing
# permissions and limitations under the License.
Description: '(SO0013) - Live Streaming on AWS - v3.0.0'

Parameters:

  InputType:
    Description: Specify the input type for MediaLive. Detailed instructions for each input type can be found here https://docs.aws.amazon.com/solutions/latest/live-streaming-on-aws/appendix-a.html
    Type: String
    Default: RTMP_PUSH
    AllowedValues:
      - RTMP_PUSH

  EncodingProfile:
    Description: Select an encoding profile. HD 1080p [1920x1080, 1280x720, 960x540, 768x432, 640x360, 512x288] HD 720p [1280x720, 960x540, 768x432, 640x360, 512x288] SD 540p [960x540, 768x432, 640x360, 512x288]  See the implementation guide for details https://docs.aws.amazon.com/solutions/latest/live-streaming/considerations.html
    Type: String
    Default: HD-1080p
    AllowedValues:
      - HD-1080p

  InputCIDR:
    Description: For RTP and RTMP PUSH input types ONLY, specify the CIDR Block for the MediaLive SecurityGroup. Input security group restricts access to the input and prevents unauthorized third parties from pushing content into a channel that is associated with that input.
    Type: String
    Default: ""

  ChannelStart:
    Description: If your source is ready to stream, select true. This will start the MediaLive Channel as part of the deployment. If you select false, you will need to manually start the MediaLive Channel when your source is ready.
    Type: String
    Default: Yes
    AllowedValues:
      - Yes
      - No

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      -
        Label:
          default: LIVE STREAM SOURCE
        Parameters:
          - InputType
      -
        Label:
          default: RTP_PUSH / RTMP_PUSH CONFIGURATION
        Parameters:
          - InputCIDR
      -
        Label:
          default: ENCODING OPTIONS
        Parameters:
          - EncodingProfile
          - ChannelStart

    ParameterLabels:
      InputType:
        default: Source Input Type
      EncodingProfile:
        default: Encoding Profile
      InputCIDR:
        default: Input CIDR Block
      ChannelStart:
        default: Start MediaLive Channel

Mappings:
  SourceCode:
    General:
      S3Bucket: solutions
      KeyPrefix: live-streaming-on-aws/v3.0.0
  AnonymousData:
    SendAnonymousData:
      Data: No

Conditions:
    Metrics: !Equals [ !FindInMap [AnonymousData,SendAnonymousData,Data], No]
    Start: !Equals [ !Ref ChannelStart , Yes ]

Resources:

  CustomResourceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-custom-resource"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource:
                  - !Join ["", ["arn:aws:logs:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":log-group:/aws/lambda/*"]]
              -
                Effect: Allow
                Action:
                  - medialive:createInputSecurityGroup
                  - medialive:describeInput
                  - medialive:createInput
                  - medialive:deleteInput
                  - medialive:stopChannel
                  - medialive:createChannel
                  - medialive:deleteChannel
                  - medialive:describeInputSecurityGroup
                  - medialive:deleteInputSecurityGroup
                  - medialive:describeChannel
                  - medialive:startChannel
                  - medialive:tagResource
                Resource:
                    - !Join ["", ["arn:aws:medialive:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - mediapackage:createChannel
                  - mediapackage:deleteChannel
                  - mediapackage:listOriginEndpoints
                  - mediapackage:deleteOriginEndpoint
                  - mediapackage:createOriginEndpoint

                Resource:
                    - !Join ["", ["arn:aws:mediapackage:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - ssm:PutParameter
                Resource:
                  - !Join ["", ["arn:aws:ssm:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":parameter/*"]]
              -
                Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !Join ["", ["arn:aws:iam::", Ref: "AWS::AccountId", ":role/*"]]

    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W11
            reason: "role/* is required as !GetAtt MediaPackageRole.Arn creates a circular dependency."

  MediaLiveRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "medialive.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-mediatranscode-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - mediaconnect:ManagedDescribeFlow
                  - mediaconnect:ManagedAddOutput
                  - mediaconnect:ManagedRemoveOutput
                Resource:
                  - !Join ["", ["arn:aws:mediaconnect:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":*"]]
              -
                Effect: Allow
                Action:
                  - mediapackage:DescribeChannel
                Resource:
                  - !Join ["", ["arn:aws:mediapackage:", Ref: "AWS::Region", ":", Ref: "AWS::AccountId", ":channels/*"]]

  MediaPackageRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - "mediapackage.amazonaws.com"
            Action:
              - sts:AssumeRole
      Policies:
        -
          PolicyName: !Sub "${AWS::StackName}-mediapackage-role"
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                  - secretsmanager:DescribeSecret
                  - secretsmanager:ListSecrets
                  - secretsmanager:ListSecretVersionIds
                Resource:
                  - !Ref CdnSecret
              -
                Effect: Allow
                Action:
                  - iam:GetRole
                  - iam:PassRole
                Resource: "*"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: F38
            reason: "Resource level permission is not supported by getRole"
          - id: W11
            reason: "* is required for MediaPackage CDN Authorization: https://docs.aws.amazon.com/mediapackage/latest/ug/setting-up-create-trust-rel-policy-cdn.html"

  CdnSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Description: !Sub CDN authorization string value for ${AWS::StackName} Live streaming Deployment
      SecretString: !Sub "{\"MediaPackageCDNIdentifier\":\"${Uuid.UUID}\"}"
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W77
            reason: "Using default keys as this is uuid and not a password. MediaPackage CDN Authorization: https://docs.aws.amazon.com/mediapackage/latest/ug/setting-up-create-trust-rel-policy-cdn.html"

  CustomResource:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub ${AWS::StackName}-livestream-custom-resources
      Description: Used to deploy custom resources and send AnonymousData
      Handler: index.handler
      Role: !GetAtt CustomResourceRole.Arn
      Code:
        S3Bucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
        S3Key: !Join ["/", [!FindInMap ["SourceCode", "General", "KeyPrefix"], "custom-resource.zip"]]
      Runtime: nodejs12.x
      Timeout: 180
      Environment:
        Variables:
          SOLUTION_IDENTIFIER: 'AwsSolution/SO0013/v3.0.0'
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W89
            reason: "W89: We do not need a VPC for this custom resource lambda."
          - id: W92
            reason: "W92: Custom resource does not need ReservedConcurrentExecution. "

  MediaPackageChannel:
    Type: Custom::MediaPackageChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageChannel
      ChannelId: !Sub ${AWS::StackName}-livestream

  MediaPackageHlsEndpoint:
    Type: Custom::MediaPackageHlsEndpoint
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaPackageEndPoint
      EndPoint: HLS
      ChannelId: !GetAtt MediaPackageChannel.ChannelId
      SecretsRoleArn: !GetAtt MediaPackageRole.Arn
      CdnIdentifierSecret: !Ref CdnSecret

  MediaLiveInput:
    Type: Custom::MediaLiveInput
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveInput
      StreamName: !Sub ${AWS::StackName}-livestream
      Type: !Ref InputType
      Cidr: !Ref InputCIDR
      RoleArn: !GetAtt MediaLiveRole.Arn

  MediaLiveChannel:
    Type: Custom::MediaLiveChannel
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannel
      Name: !Sub ${AWS::StackName}-livestream
      EncodingProfile: !Ref EncodingProfile
      Codec: AVC
      Role: !GetAtt MediaLiveRole.Arn
      InputId: !GetAtt MediaLiveInput.Id
      Type: !Ref InputType
      MediaPackageChannelId: !Sub ${AWS::StackName}-livestream

  MediaLiveChannelStart:
    Condition: Start
    Type: Custom::MediaLiveChannelStart
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: MediaLiveChannelStart
      ChannelId: !GetAtt MediaLiveChannel.ChannelId

  CloudFront:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Logging:
          IncludeCookies: false
          Bucket: !GetAtt LogsBucket.DomainName
          Prefix: cloudfront-logs/
        Origins:
          - Id: mediapackage
            DomainName: !GetAtt MediaPackageHlsEndpoint.DomainName
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
            OriginCustomHeaders:
              -
                HeaderName: X-MediaPackage-CDNIdentifier
                HeaderValue: !Sub ${Uuid.UUID}
        Enabled: true
        DefaultCacheBehavior:
          TargetOriginId: mediapackage
          SmoothStreaming: false
          AllowedMethods:
            - GET
            - HEAD
            - OPTIONS
          CachedMethods:
            - GET
            - HEAD
            - OPTIONS
          ForwardedValues:
            QueryString: true
            Cookies:
              Forward: all
            Headers:
              - Access-Control-Allow-Origin
              - Access-Control-Request-Method
              - Access-Control-Request-Header
              - Origin
          ViewerProtocolPolicy: allow-all
        CustomErrorResponses:
          - ErrorCode: 400
            ErrorCachingMinTTL: 1
          - ErrorCode: 403
            ErrorCachingMinTTL: 1
          - ErrorCode: 404
            ErrorCachingMinTTL: 1
          - ErrorCode: 405
            ErrorCachingMinTTL: 1
          - ErrorCode: 414
            ErrorCachingMinTTL: 1
          - ErrorCode: 416
            ErrorCachingMinTTL: 1
          - ErrorCode: 500
            ErrorCachingMinTTL: 1
          - ErrorCode: 501
            ErrorCachingMinTTL: 1
          - ErrorCode: 502
            ErrorCachingMinTTL: 1
          - ErrorCode: 503
            ErrorCachingMinTTL: 1
          - ErrorCode: 504
            ErrorCachingMinTTL: 1
        ViewerCertificate:
          CloudFrontDefaultCertificate: true
      Tags:
        - Key: mediapackage:cloudfront_assoc
          Value: !GetAtt MediaPackageChannel.Arn
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W70
            reason: "CloudFront automatically sets the security policy to TLSv1 when the distribution uses the CloudFront domain name (CloudFrontDefaultCertificate=true)"

  LogsBucket:
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      AccessControl: LogDeliveryWrite
      BucketEncryption:
        ServerSideEncryptionConfiguration:
          - ServerSideEncryptionByDefault:
              SSEAlgorithm: AES256
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W35
            reason: "Used to store access logs for other buckets"
          - id: W51
            reason: "Bucket is private and does not need a bucket policy"

  # Demo Assets
  DemoBucket:
    Type: 'AWS::S3::Bucket'
    Properties:
      LoggingConfiguration:
        DestinationBucketName: !Ref LogsBucket
        LogFilePrefix: demo_bucket/
    Metadata:
      cfn_nag:
        rules_to_suppress:
          - id: W41
            reason: "Encryption not enabled, this bucket host a website accessed through CloudFront"

  DemoBucketPolicy:
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref DemoBucket
      PolicyDocument:
        Statement:
          -
            Effect: Allow
            Principal:
              CanonicalUser: !GetAtt DemoOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Join ["", ["arn:aws:s3:::", Ref: "DemoBucket", "/*"]]

  DemoOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "access-identity-${DemoBucket}"

  DemoCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Logging:
            IncludeCookies: false
            Bucket: !GetAtt LogsBucket.DomainName
            Prefix: cloudfront-demo-logs/
          Comment: "Website distribution for solution"
          Origins:
            -
              Id: S3-solution-website
              DomainName: !Sub "${DemoBucket}.s3.${AWS::Region}.amazonaws.com"
              S3OriginConfig:
                  OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${DemoOriginAccessIdentity}"
          DefaultCacheBehavior:
            TargetOriginId: S3-solution-website
            AllowedMethods:
                - GET
                - HEAD
                - OPTIONS
                - PUT
                - POST
                - PATCH
                - DELETE
            CachedMethods:
                - GET
                - HEAD
                - OPTIONS
            ForwardedValues:
                QueryString: false
            ViewerProtocolPolicy: redirect-to-https
          IPV6Enabled: true
          DefaultRootObject: "index.html"
          CustomErrorResponses:
            - ErrorCode: 404
              ResponsePagePath: "/index.html"
              ResponseCode: 200
            - ErrorCode: 403
              ResponsePagePath: "/index.html"
              ResponseCode: 200
          ViewerCertificate:
              CloudFrontDefaultCertificate: true
          Enabled: true
          HttpVersion: 'http2'
      Metadata:
        cfn_nag:
          rules_to_suppress:
            - id: W70
              reason: "CloudFront automatically sets the security policy to TLSv1 when the distribution uses the CloudFront domain name (CloudFrontDefaultCertificate=true)"

  DemoIamPolicy:
    Type: "AWS::IAM::Policy"
    Properties:
      PolicyName: "livestreamDemoPolicy"
      Roles:
        - Ref: "CustomResourceRole"
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          -
            Effect: "Allow"
            Action:
              - s3:putObject
              - s3:getObject
              - s3:deleteObject
              - s3:listBucket
            Resource:
              - !Join ["", ["arn:aws:s3:::", Ref: "DemoBucket"]]
              - !Join ["", ["arn:aws:s3:::", Ref: "DemoBucket", "/*" ]]
          -
            Effect: "Allow"
            Action:
              - s3:getObject
            Resource:
              - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region"]]
              - !Join ["", ["arn:aws:s3:::",!FindInMap ["SourceCode", "General", "S3Bucket"], "-", Ref: "AWS::Region","/*"]]

  DemoConsole:
    DependsOn: DemoIamPolicy
    Type: Custom::DemoDeloy
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: DemoConsole
      srcBucket: !Join ["-", [!FindInMap ["SourceCode", "General", "S3Bucket"], Ref: "AWS::Region"]]
      srcPath: !FindInMap ["SourceCode", "General", "KeyPrefix"]
      manifestFile: console-manifest.json
      destBucket: !Ref DemoBucket
      awsExports:
        !Sub |
          //Configuration file generated by cloudformation
          const awsExports = {
            mediaLiveConsole: 'https://console.aws.amazon.com/medialive/home?region=${AWS::Region}#/channels/${MediaLiveChannel.ChannelId}',
            hls_manifest: 'https://${CloudFront.DomainName}/out/v1${MediaPackageHlsEndpoint.Manifest}'
          }

  # Metrics
  Uuid:
    Condition: Metrics
    Type: "Custom::UUID"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: UUID

  AnonymousMetric:
    Condition: Metrics
    Type: "Custom::AnonymousMetric"
    Properties:
      ServiceToken: !GetAtt CustomResource.Arn
      Resource: AnonymousMetric
      SolutionId: "SO0013"
      UUID: !GetAtt Uuid.UUID
      Version: "v3.0.0"
      InputType: !Ref InputType
      EncodingProfile: !Ref EncodingProfile

Outputs:
  UUID:
    Condition: Metrics
    Description: AnonymousMetric UUID
    Value: !GetAtt Uuid.UUID

  MediaLivePrimaryEndpoint:
    Description: Primary MediaLive input Url
    Value: !GetAtt MediaLiveInput.EndPoint1

  CloudFrontHlsEndpoint:
    Description: HLS CloudFront URL
    Value: !Sub https://${CloudFront.DomainName}/out/v1${MediaPackageHlsEndpoint.Manifest}

  DemoConsole:
    Description: Demo Player URL
    Value: !Sub https://${DemoCloudFront.DomainName}/index.html

  DemoBucket:
    Description: Demo bucket
    Value: !Ref DemoBucket

  LogsBucket:
    Description: Logs bucket
    Value: !Ref LogsBucket
